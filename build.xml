<project name="DependencyFinder" default="all" basedir=".">

    <description>
        Dependency Finder, JarJarDiff, and OOMetrics
    </description>

    <property environment="env"/>

    <target name="init">
        <tstamp>
            <format property="NOW" pattern="yyyy-MM-dd HH:mm:ss"/>
        </tstamp>

        <property name="release" value="1.3.2"/>

        <property name="srcDir" value="lib/src/main"/>
        <property name="binDir" value="bin"/>
        <property name="classesDir" value="classes"/>
        <property name="libDir" value="lib"/>
        <property name="etcDir" value="etc"/>
        <property name="webDir" value="web"/>
        <property name="docsDir" value="docs"/>
        <property name="logsDir" value="logs"/>
        <property name="distDir" value="dist"/>

        <property name="binFiles" value="${binDir}/**"/>
        <property name="etcFiles" value="${etcDir}/**"/>
        <property name="webFiles" value="${webDir}/**"/>
        <property name="docsFiles" value="${docsDir}/**"/>

        <property name="jarFile" value="${libDir}/${ant.project.name}.jar"/>
        <property name="javadocFile" value="${libDir}/${ant.project.name}-javadoc.jar"/>
        <property name="sourcesFile" value="${libDir}/${ant.project.name}-sources.jar"/>
        <property name="warFile" value="${distDir}/${ant.project.name}-${release}.war"/>
        <property name="binArchive" value="${distDir}/${ant.project.name}-${release}"/>

        <mkdir dir="${classesDir}"/>
        <mkdir dir="${logsDir}"/>
    </target>

    <target name="all" depends="distclean, dist"
            description="Makes a clean distribution"/>

    <!--
        Compilation
    -->

    <target name="compile" depends="init"
            description="Compiles all classes">
        <exec executable="./gradlew">
            <arg value="assemble"/>
            <env key="DEPENDENCY_FINDER_VERSION" value="${release}"/>
            <env key="DEPENDENCY_FINDER_RELEASE_DATE" value="${NOW}"/>
        </exec>
    </target>

    <!--
        Tests
    -->

    <target name="check" depends="init"
            description="Runs all tests and generates a test run report">
        <exec executable="./gradlew">
            <arg value="check"/>
        </exec>
    </target>

    <!--
        Executable environment
    -->

    <target name="exec" depends="jar, generatebin, log4j.config"
            description="Compiles a version that works inplace"/>

    <target name="generatebin" depends="init">
        <exec executable="perl"
              dir="${binDir}">
            <arg value="ScriptGenerator.pl"/>
            <arg value="-g"/>
            <arg value="-v"/>
        </exec>
        <fixcrlf srcdir="${binDir}"
                 excludes="**/*.*"
                 eol="unix"
                 eof="remove"/>
    </target>

    <target name="log4j.config" depends="init">
        <copy file="lib/src/main/resources/log4j2.properties" tofile="${classesDir}/log4j2.properties"/>
    </target>

    <!--
        Distribution
    -->

    <target name="dist" depends="dist.init, docs, bin, war"
            description="Compiles and builds the binary distributions"/>

    <target name="dist.init" depends="init">
        <mkdir dir="${distDir}"/>
    </target>

    <!--
        Packaging files
    -->

    <target name="bin" depends="generatebin, bin.zip, bin.tar.gz"/>

    <target name="bin.zip" depends="jar">
        <zip zipfile="${binArchive}.zip">
            <zipfileset dir="." prefix="${ant.project.name}-${release}">
                <patternset>
                    <include name="license.txt"/>
                    <include name="readme.txt"/>
                    <include name="${binFiles}/**/*.bat"/>
                    <include name="${libDir}/*.jar"/>
                    <include name="${etcFiles}"/>
                    <include name="${docsFiles}"/>
                    <exclude name="${docsDir}/**/*.txt"/>
                </patternset>
            </zipfileset>
            <zipfileset dir="${srcDir}/resources" prefix="${ant.project.name}-${release}/${classesDir}">
                <patternset>
                    <include name="**/*.properties"/>
                </patternset>
            </zipfileset>
        </zip>
    </target>

    <target name="bin.tar.gz" depends="jar">
        <tar destfile="${binArchive}.tar.gz" compression="gzip">
            <tarfileset dir="." prefix="${ant.project.name}-${release}">
                <patternset>
                    <include name="license.txt"/>
                    <include name="readme.txt"/>
                    <include name="${libDir}/*.jar"/>
                    <include name="${etcFiles}"/>
                    <include name="${docsFiles}"/>
                    <exclude name="${docsDir}/**/*.txt"/>
                </patternset>
            </tarfileset>
            <tarfileset dir="." prefix="${ant.project.name}-${release}" mode="755">
                <patternset>
                    <include name="${binFiles}"/>
                    <exclude name="${binDir}/**/*.*"/>
                </patternset>
            </tarfileset>
            <tarfileset dir="${srcDir}/resources" prefix="${ant.project.name}-${release}/${classesDir}">
                <patternset>
                    <include name="**/*.properties"/>
                </patternset>
            </tarfileset>
        </tar>
    </target>

    <target name="jar" depends="compile"
            description="Builds the main application JAR file">
        <exec executable="./gradlew">
            <arg value="copyJarsForDependencies"/>
        </exec>
        <copy file="lib/build/libs/lib.jar" tofile="${jarFile}"/>
        <copy file="lib/build/libs/lib-javadoc.jar" tofile="${javadocFile}"/>
        <copy file="lib/build/libs/lib-sources.jar" tofile="${sourcesFile}"/>
    </target>

    <target name="war" depends="jar">
        <copy file="webapp/build/libs/webapp.war" tofile="${warFile}"/>
    </target>

    <!--
        Docs
    -->

    <target name="docs" depends="init"
            description="Builds the API documentation">
        <echo message="Processing Manual.txt ..."/>
        <exec executable="perl"
              output="${docsDir}/Manual.html">
            <arg value="${binDir}/txt2html.pl"/>
            <arg value="${docsDir}/Manual.txt"/>
            <env key="TXT2HTML_VERSION" value="${release}"/>
        </exec>
        <echo message="Processing Developer.txt ..."/>
        <exec executable="perl"
              output="${docsDir}/Developer.html">
            <arg value="${binDir}/txt2html.pl"/>
            <arg value="${docsDir}/Developer.txt"/>
            <env key="TXT2HTML_VERSION" value="${release}"/>
        </exec>
        <echo message="Processing Tools.txt ..."/>
        <exec executable="perl"
              output="${docsDir}/Tools.html">
            <arg value="${binDir}/txt2html.pl"/>
            <arg value="${docsDir}/Tools.txt"/>
            <env key="TXT2HTML_VERSION" value="${release}"/>
        </exec>
    </target>

    <!--
        Cleaning up
    -->

    <target name="clearlogs" depends="init">
        <delete verbose="true">
            <fileset dir=".">
                <patternset>
                    <include name="**/*.log"/>
                </patternset>
            </fileset>
        </delete>
        <delete dir="${logsDir}" verbose="true"/>
    </target>

    <target name="cleandocs" depends="init">
        <delete verbose="true">
            <fileset dir="${docsDir}">
                <patternset>
                    <include name="**/*.html"/>
                    <exclude name="index.html"/>
                    <exclude name="Menu.html"/>
                    <exclude name="Title.html"/>
                    <exclude name="tasks/**"/>
                </patternset>
            </fileset>
        </delete>
    </target>

    <target name="cleanbin" depends="init">
        <exec executable="perl"
              dir="${binDir}">
            <arg value="ScriptGenerator.pl"/>
            <arg value="-c"/>
            <arg value="-v"/>
        </exec>
    </target>

    <target name="clean" depends="init">
        <exec executable="./gradlew">
            <arg value="clean"/>
        </exec>
    </target>

    <target name="realclean" depends="clearlogs, cleandocs, cleanbin, clean"
            description="Removes all produced files">
        <delete verbose="true">
            <fileset dir="${libDir}">
                <patternset>
                    <include name="*.jar"/>
                </patternset>
            </fileset>
        </delete>
        <delete dir="${classesDir}"
                verbose="true"/>
    </target>

    <target name="distclean" depends="realclean"
            description="Removes all produced files, including distribution files">
        <delete dir="${distDir}"
                includeEmptyDirs="true"
                verbose="true"/>
    </target>

</project>
