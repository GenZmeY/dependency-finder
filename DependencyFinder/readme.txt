Content
-------

This is the Dependency Finder toolkit.  It contains a number of
tools for exploring relationships in (compiled) Java code.

Sections ahead:
      - Licensing
      - Installation
      - Tools

Licensing
---------

This software is licensed under the terms of the GNU Lesser
General Public License.  A copy is in the file lgpl.txt and
you can also get it on the web at www.gnu.org.

Installation
------------

To install:

   1) You need to have a Java Virtual Machine installed.  You
      can get one for free from www.javasoft.com.  Make sure
      you define the JAVA_HOME environment variable.

      For example, if you installed JDK 1.3 in C:\jdk1.3:

	  SET JAVA_HOME=C:\jdk1.3

	  You can either add this line to your
	  AUTOEXEC.BAT file, or on WinNT use
	  Start | Settings | Control Panel | System
	  and select the Environment tab to create
	  and edit variables.

   2) Create an environment variable named DEPENDENCYFINDER_HOME
      and have it point to the directory where you installed
      Dependency Finder.

      For example, if you extracted the ZIP file in C:\

	  SET DEPENDENCYFINDER_HOME=C:\DependencyFinder

	  You can either enter this line in your AUTOEXEC.BAT
	  file, or on WinNT use
	  Start | Settings | Control Panel | System
	  and select the Environment tab to create and edit
	  variables.

    3) Add the "bin" subdirectory to your PATH variable.

       For example, if you extracted the ZIP file in C:\

	  SET PATH=C:\DependencyFinder\bin;%PATH%

    4) Under Win95/98, you will need to reboot your computer.

Done.

If you get the message "Out of environment space" while running
the scripts on a Windows machine, you will need to add the
following line to your C:\CONFIG.SYS file and then reboot.

    shell=command.com /e:8192 /p

If the VM runs out of memory, try setting the
DEPENDENCYFINDER_OPTS environment variable.

    SET DEPENDENCYFINDER_OPTS=-Xmx128m

Tools
-----

Here are the tools in this toolkit.  Most of them support a -help
switch that provides guidance on the format of the command line.

DependencyExtractor
	Takes a JAR and computes dependencies between packages,
	classes, and features (methods and attributes).  The
	result is an XML document containing all the dependencies.

	Examples:

	C:\>DependencyExtractor -xml -out dg.xml 

	This command scans the current directory and its
	subdirectories for .class files to analyze.  It saves the
	resulting dependency graph to dg.xml.

	C:\>DependencyExtractor -xml -out dg.xml DependencyFinder.jar rt.jar

	This command scans the specified JAR files for .class
	files to analyze.  It saves the resulting dependency graph
	to dg.xml.

	C:\>DependencyExtractor -xml -minimize -out dg.xml DependencyFinder.jar rt.jar

	This command scans the specified JAR files for .class
	files to analyze.  It saves the resulting dependency graph
	to dg.xml, after having minimized it.

	C:\>DependenciesToHTML -in dg.xml -out dependencies.html

	This command converts the dependency graph to a hyperlinked
	HTML file, for ease of use.  This HTML file shows both
	outbound and inbound dependencies.

	C:\>DependablesToHTML -in dg.xml -out dependencies.html

	This command converts the dependency graph to a hyperlinked
	HTML file with only inboud dependencies shown.  An element
	with many inbound dependencies is said to be dependable,
	meaning that many other elements rely on it being stable.

	C:\>DependentsToHTML -in dg.xml -out dependencies.html

	This command converts the dependency graph to a hyperlinked
	HTML file with only outboud dependencies shown.  An element
	with many outbound dependencies is said to be dependent,
	meaning that it relies on many other elements being stable.

DependencyReporter
	This tool takes a dependency graph generated by Dependency-
	Extractor and filters it based on selection criteria provided
	by the user.  The result is a new dependency graph which is
	a subgraph of the original one.  You can use the various
	XXXToText and XXXToHTML scripts to render the graph as text
	or HTML for human reading.

DependencyClosure
	This tool takes a dependency graph generated by Dependency-
	Extractor and follows a trail of dependencies to construct
	a subgraph of all dependencies related to a starting point.
	The result is a new dependency graph which is a subgraph of
	the original one.  You can use the various XXXToText and
	XXXToHTML scripts to render the graph as text or HTML for
	human reading.

DependencyMetrics
	Computes dependency numbers from a dependency graph, such
	as number of nodes, number of entering vertices, and number
	of exiting vertices.

ClassMetrics
	Computes numbers from a JAR file, such as number of packages,
	classes and interfaces, average number of methods per class,
	number of static, synchronized, or abstract methods, etc.

DependencyFinder
	A Swing-based application that combines DependencyExtractor,
	DependencyReporter, DependencyClosure, and DependencyMetrics.

OOMetrics
	Computes a number of object-oriented software metrics from a
	JAR file, such as methods per class and depth of inheritance.
	It can aggregate values at the class, package, and / or
	project level.

OOMetricsGUI
	A Swing-based version of OOMetrics.

JarJarDiff
	Takes two JAR files and computes the API changes between
	them.  The first JAR file is considered the "old" code and
	the second JAR file is considered the "new" code.  The
	result is an XML document listing the changes.  You can
	use DiffToInternalHTML and DiffToExternalHTML to render
	the report in HTML.  The second one is more restrictive as
	to what gets included in the report, so you can limit the
	report to "public" changes.

	Examples:

	C:\>JarJarDiff -old old.jar -new new.jar -out result.xml
	C:\>DiffToInternalHTML -in result.xml -out internal_report.html
	C:\>DiffToExternalHTML -in result.xml -out external_report.html

	This will compare old.jar to new.jar and write the report
	to result.xml.  The title will say "Version old.jar to Version
	new.jar".  You can adjust the title by supplying -old-label and
	-new-label to JarJarDiff.

	C:\>JarJarDiff -old old.jar -old-label 3.0.2 -new new.jar -new-label 3.5 > result.xml
	C:\>DiffToInternalHTML -in result.xml -out internal_report.html
	C:\>DiffToExternalHTML -in result.xml -out external_report.html

	Because DOS only allows 9 parameters to .bat files, you
	cannot use -out here and we must use output redirection
	(the ">") instead.  The two XSLT steps are identical.

	DiffToExternalHTML uses the file
	%JARJARDIFF_HOME%\etc\public_packages.txt by default to
	limit the report to the specified packages.  If it cannot
	find this file, it looks for a file named public_packages.txt
	in the current directory.  You can specify a custom file
	by setting the validation-list parameter to XSLT:

	C:\>DiffToExternalHTML -in result.xml -out external_report.html -param validation-list my_list.txt
